1. country -  mapBattleBattalion (map_battle_battalion) // карта сражения батальона

            int[,] mapBattleBattalion = new int[N, M];            
            for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < M; j++)
                {
                    mapBattleBattalion[i, j] = 0;
                }
            }
            for (int k = 1; k < L * 2 + 1; k += 2)
            {
                mapBattleBattalion[battalion[k - 1] - 1, battalion[k] - 1] = 2;
            }

2. day - counterDaysBattle ( counter_days_battle) // счетчик дней сражений

            int counterDaysBattle = 1;
            ..............................
                    counterDaysBattle += 1;
                }
                else
                {
                    break;
                }

            }
            return counterDaysBattle;
3. str - rezultUnblocking (result_unblocking) // результат разблокировки

            s = Math.Round(s, 5);
            string rezultUnblocking = s.ToString();
            rezultUnblocking = rezultUnblocking.Replace(",", "");
            rezultUnblocking = rezultUnblocking.Replace("0", "");
            return rezultUnblocking;

4. stoka - inputString (input_string) // входящая строка
5. naumbe - lengthInputString (length_input_string) // длина входной строки
6. nou - lengthOfOutputString (length_of_output_string) // длина выходной строки
7. massivStr - arrayOfOutputString (array_of_output_string) // массив выходных строк
8. n - indexOfOutputArray (index_of_output_array) // индекс выводящего массива
9. index - indexOfSpaceInLine (index_of_space_in_line) // индекс пробела в строке
10. masun - resultOfConversionString (result_of_conversion_string) // результат преобразования строки

        int[] WordSearch(int len, string s, string subs)
        {
            string inputString = s;
            int lengthInputString = s.Length;
            int lengthOfOutputString = lengthInputString / len + 1;
            string[] arrayOfOutputString = new string[lengthOfOutputString];
            int indexOfOutputArray = 0;
            do
            {
                if (lengthInputString <= len)
                {
                    arrayOfOutputString[indexOfOutputArray] = inputString + " ";
                    indexOfOutputArray++;
                    break;
                }
                int indexOfSpaceInLine = 0;
                for (int i = len - 1; i >= 0; i--)
                {
                    if (inputString[i] == ' ')
                    {
                        indexOfSpaceInLine = i;
                        break;
                    }
                }
                if (indexOfSpaceInLine == 0)
                {
                    int index = 0;
                    for (int k = 0; k < lengthInputString; k++)
                    {
                        if (inputString[k] == ' ')
                        {
                            index = 1;
                        }
                    }
                    if (index == 1)
                    {
                        indexOfSpaceInLine = len;
                        string textt = inputString.Substring(0, indexOfSpaceInLine);
                        arrayOfOutputString[indexOfOutputArray] = textt + " ";
                        indexOfOutputArray++;
                        inputString = inputString.Remove(0, indexOfSpaceInLine + 1);
                    }
                    else
                    {
                        indexOfSpaceInLine = len;
                        string text = inputString.Substring(0, indexOfSpaceInLine);
                        arrayOfOutputString[indexOfOutputArray] = text + " ";
                        indexOfOutputArray++;
                        inputString = inputString.Remove(0, indexOfSpaceInLine);
                    }
                }
                else
                {
                    if (inputString[len] == ' ')
                    {
                        string text = inputString.Substring(0, len);
                        arrayOfOutputString[indexOfOutputArray] = text + " ";
                        indexOfOutputArray++;
                        inputString = inputString.Remove(0, len + 1);
                    }
                    else
                    {
                        string text = inputString.Substring(0, indexOfSpaceInLine);
                        arrayOfOutputString[indexOfOutputArray] = text + " ";
                        indexOfOutputArray++;
                        inputString = inputString.Remove(0, indexOfSpaceInLine + 1);
                    }
                }
            }
            while (lengthInputString > 1);
            int[] resultOfConversionString = new int[indexOfOutputArray];
            int lengthSubs = subs.Length;
            for (int j = 0; j < indexOfOutputArray; j++)
            {
                int lo = arrayOfOutputString[j].IndexOf(subs);
                if (lo >= 0)
                {
                    if ((arrayOfOutputString[j][lo + lengthSubs] == ' ') || (arrayOfOutputString[j][lo + lengthSubs] == '.'))
                    {
                        resultOfConversionString[j] = 1;
                    }
                }
                else resultOfConversionString[j] = 0;
            }
            return resultOfConversionString;
        }
11. sum - characterCodesSum (characher_codes_sum) // сумма кодов символов
12. massivCod - arrayOfСodes (array_of_codes) // массив кодов

        public int PrintingCosts(string Line)
        {
            char[] arrayOfСharacters = new char[95] { ' ', '&', ',', '2', '8', '>', 'D', 'J', 'P', 'V', '\\', 'b', 'h', 'n', 't', 'z', '!', '\'', '-', '3', '9', '?', 'E', 'K', 'Q', 'W', ']', 'c', 'i', 'o', 'u', '{', '\"', '(', '.', '4', ':', '@', 'F', 'L', 'R', 'X', '^', 'd', 'j', 'p', 'v', '|', '#', ')', '/', '5', ';', 'A', 'G', 'M', 'S', 'Y', '_', 'e', 'k', 'q', 'w', '}', '$', '*', '0', '6', '<', 'B', 'H', 'N', 'T', 'Z', '`', 'f', 'l', 'r', 'x', '~', '%', '+', '1', '7', '=', 'C', 'I', 'O', 'U', '[', 'a', 'g', 'm', 's', 'y' };
            int[] arrayOfСodes = new int[95] { 0, 24, 7, 22, 23, 10, 26, 18, 23, 19, 10, 25, 21, 18, 17, 19, 9, 3, 7, 23, 26, 15, 26, 21, 31, 26, 18, 17, 15, 20, 17, 18, 6, 12, 4, 21, 8, 32, 20, 16, 28, 18, 7, 25, 20, 25, 13, 12, 24, 12, 10, 27, 11, 24, 25, 28, 25, 14, 8, 23, 21, 25, 19, 18, 29, 17, 22, 26, 10, 29, 25, 25, 16, 22, 3, 18, 16, 13, 13, 9, 22, 13, 19, 16, 14, 20, 18, 26, 23, 18, 23, 30, 22, 21, 24 };
            int characterCodesSum = 0;
            bool done = false;
            for (int i = 0; i < Line.Length; i++)
            {
                for (int j = 0; j < 95; j++)
                {
                    if (Line[i] == arrayOfСharacters[j])
                    {
                        characterCodesSum = characterCodesSum + arrayOfСodes[j];
                        done = true;
                        break;
                    }
                    else
                    {
                        done = false;
                    }
                }
                if (done == false)
                {
                    characterCodesSum += 23;
                }
                done = false;
            }
            return characterCodesSum;
        }